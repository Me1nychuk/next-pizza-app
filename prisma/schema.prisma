generator client  {
    provider = "prisma-client-js"
}

datasource db  {
    provider = "postgresql"
    url      = env("POSTGRES_URL")
    directUrl = env("POSTGRES_URL_NON_POOLING")
}

model User {
    id           String   @id @default(uuid())

    fullname     String   
    email        String   @unique
    password     String
    
    role UserRole @default(USER)

    cart             Cart?
    orders           Order[]

    verificationCode  VerificationCode?

    provider    String?
    providerId  String?

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt


    }



model Category{
    id           String   @id @default(uuid())
    name String  @unique
    products Product[]



     createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model Product {
    id           String   @id @default(uuid())
    
    name String
    imageUrl String

    category Category @relation(fields: [categoryId],references: [id])
    categoryId String

    ingrediens Ingredient[]

    items ProductItem[]


    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model ProductItem{
    id           String   @id @default(uuid())
    
    price Int
    size Int?
    pizzaType Int?

    cartItems CartItem[]

    product Product @relation(fields: [productId],references: [id])
    productId String



    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model Ingredient{
    id           String   @id @default(uuid())
 
    name String
    price Int
    imageUrl String

    products Product[]

    cartItems CartItem[]

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model Cart{
    id           String   @id @default(uuid())
    
    user User? @relation(fields: [userId],references: [id])
    userId String?  @unique

    items CartItem[]

    totalAmout Int @default(0)

    token String

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model CartItem{
    id           String   @id @default(uuid())

    cart Cart @relation(fields: [cartId], references: [id]) 
    cartId String   
    
    product ProductItem @relation(fields: [productItemId], references: [id]) 
    productItemId String   

    quantity Int 

    ingredients Ingredient[]

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model Order{
    id           String   @id @default(uuid())
    
    user User? @relation(fields: [userId],references: [id])
    userId String?  

    token String 

    totalAmout Int
    status OrderStatus
    paymentId String?
    
    items Json

    fullname String
    phone String
    email String
    address String
    comment String?

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model VerificationCode {
    id           String   @id @default(uuid())
    
    user User? @relation(fields: [userId],references: [id])
    userId String @unique  

    code String
   
    createdAt DateTime @default(now())
    @@unique([userId, code])
    
}

enum OrderStatus{
    PENDING
    SUCCEEDED
    CANCELLED
}

enum UserRole{
    USER
    ADMIN
}